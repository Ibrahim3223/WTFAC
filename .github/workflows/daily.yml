name: Daily Shorts (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || inputs.environment }}
  cancel-in-progress: false

jobs:
  build-upload:
    runs-on: ubuntu-latest

    # Environment'a bağlı secret/vars
    environment: ${{ inputs.environment }}

    timeout-minutes: 30

    env:
      TZ:                 ${{ vars.TZ || 'UTC' }}
      # —— içerik kontrolü
      CHANNEL_NAME:       ${{ inputs.environment }}
      MODE:               ${{ vars.MODE || 'default' }}
      LANG:               ${{ vars.LANG || 'en' }}
      VISIBILITY:         ${{ vars.VISIBILITY || 'public' }}
      TOPIC:              ${{ vars.TOPIC || '' }}
      SEARCH_TERMS:       ${{ vars.SEARCH_TERMS || '' }}   # JSON dizi veya virgüllü string; script ikisini de okur
      ROTATION_SEED:      ${{ vars.ROTATION_SEED || '0' }}
      # —— TTS / Caption
      TTS_VOICE:          ${{ vars.TTS_VOICE || '' }}
      TTS_RATE:           ${{ vars.TTS_RATE || '+12%' }}
      CAPTION_MAX_LINE:   ${{ vars.CAPTION_MAX_LINE || '28' }}
      CAPTION_MAX_LINES:  ${{ vars.CAPTION_MAX_LINES || '6' }}
      TARGET_MIN_SEC:     ${{ vars.TARGET_MIN_SEC || '22' }}
      TARGET_MAX_SEC:     ${{ vars.TARGET_MAX_SEC || '42' }}
      # —— Gemini (opsiyonel)
      USE_GEMINI:         ${{ vars.USE_GEMINI || '0' }}
      GEMINI_MODEL:       ${{ vars.GEMINI_MODEL || 'gemini-1.5-flash' }}
      # —— API keys (secrets)
      PEXELS_API_KEY:     ${{ secrets.PEXELS_API_KEY }}
      GEMINI_API_KEY:     ${{ secrets.GEMINI_API_KEY }}
      YT_CLIENT_ID:       ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET:   ${{ secrets.YT_CLIENT_SECRET }}
      YT_REFRESH_TOKEN:   ${{ secrets.YT_REFRESH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare output dir
        run: mkdir -p out

      - name: Run generator & upload
        run: python autoshorts_daily.py

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-last-video
          path: out/*.mp4
          retention-days: 2
          if-no-files-found: ignore
