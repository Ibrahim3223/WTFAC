name: Daily Shorts (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || inputs.environment }}
  cancel-in-progress: false

jobs:
  build-upload:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    timeout-minutes: 40

    # ---- ENV (repo secrets -> runtime env) ----
    env:
      TZ:                 ${{ vars.TZ || 'UTC' }}
      CHANNEL_NAME:       ${{ inputs.environment }}
      MODE:               ${{ vars.MODE || '' }}           # Boş bırak; kod auto-route ediyor
      LANG:               ${{ vars.LANG || 'en' }}
      VISIBILITY:         ${{ vars.VISIBILITY || 'public' }}
      TTS_VOICE:          ${{ vars.TTS_VOICE || '' }}
      TARGET_MIN_SEC:     ${{ vars.TARGET_MIN_SEC || '22' }}
      TARGET_MAX_SEC:     ${{ vars.TARGET_MAX_SEC || '42' }}
      ROTATION_SEED:      ${{ vars.ROTATION_SEED || github.run_number }}
      USE_GEMINI:         '1'
      GEMINI_API_KEY:     ${{ secrets.GEMINI_API_KEY }}
      PEXELS_API_KEY:     ${{ secrets.PEXELS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Restore content/state caches (global + channel) ----
      - name: Restore global content cache
        id: cache-global-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            state_global_topics.json
          key: global-state-v1

      - name: Restore channel state cache
        id: cache-channel-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            state_${{ github.event.inputs.environment }}.json
          key: chstate-${{ github.event.inputs.environment }}-v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare output dir
        run: mkdir -p out

      # Küçük jitter: API rate spikes'ı azaltır
      - name: Jitter
        run: |
          S=$(( ( RANDOM % 10 ) + 3 ))
          echo "Sleeping $S sec to spread load..."
          sleep $S

      - name: Run generator & upload (Gemini on)
        run: python autoshorts_daily.py

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-last-video
          path: out/*.mp4
          retention-days: 2
          if-no-files-found: ignore

      # ---- Save caches back (so next runs remember topics/pexels) ----
      - name: Save global content cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            state_global_topics.json
          key: global-state-v1

      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            state_${{ github.event.inputs.environment }}.json
          key: chstate-${{ github.event.inputs.environment }}-v1
