name: Daily Shorts (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: write
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg
        run: |
          echo "ðŸ“¦ Installing FFmpeg for video/audio processing..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq ffmpeg
          echo "âœ… FFmpeg version:"
          ffmpeg -version | head -n1

      # ---------- PRE: .state'i 'state' branch'inden geri yÃ¼kle (worktree-safe) ----------
      - name: Restore .state from 'state' branch (worktree-safe)
        shell: bash
        run: |
          set -e
          git fetch origin state || true
          if git ls-remote --exit-code origin state >/dev/null 2>&1; then
            git worktree add _state_wt origin/state
            mkdir -p .state
            cp -r _state_wt/.state/. .state/ 2>/dev/null || true
            git worktree remove _state_wt --force
          else
            mkdir -p .state
          fi

      # ---------- Kanal ENV'leri ----------
      - name: Export channel variables (safe)
        shell: bash
        env:
          INPUT_ENV:            ${{ inputs.environment }}

          VARS_TOPIC:           ${{ vars.TOPIC }}
          VARS_LANG:            ${{ vars.LANG }}
          VARS_MODE:            ${{ vars.MODE }}
          VARS_VISIBILITY:      ${{ vars.VISIBILITY }}
          VARS_ROTATION_SEED:   ${{ vars.ROTATION_SEED }}
          VARS_SEARCH_TERMS:    ${{ vars.SEARCH_TERMS }}
          VARS_GEMINI_PROMPT:   ${{ vars.GEMINI_PROMPT }}
          VARS_TTS_RATE:        ${{ vars.TTS_RATE }}
          VARS_TTS_VOICE:       ${{ vars.TTS_VOICE }}
          VARS_BGM_URLS:        ${{ vars.BGM_URLS }}

          KARAOKE_OFFSET_MS: "+50"
          KARAOKE_SPEED: "1.0"
        run: |
          set -euo pipefail

          CHANNEL_NAME="$INPUT_ENV"
          LANG_VAL="${VARS_LANG:-}"
          MODE_VAL="${VARS_MODE:-}"
          VIS_VAL="${VARS_VISIBILITY:-}"
          SEED_VAL="${VARS_ROTATION_SEED:-}"

          wenv () {
            local __name="$1"; shift
            local __val="$*"
            local __delim="EOF_${__name}_$$"
            {
              echo "${__name}<<${__delim}"
              printf '%s\n' "${__val}"
              echo "${__delim}"
            } >> "$GITHUB_ENV"
          }

          wenv CHANNEL_NAME        "${CHANNEL_NAME}"
          wenv TOPIC               "${VARS_TOPIC}"
          wenv LANG                "${LANG_VAL}"
          wenv MODE                "${MODE_VAL}"
          wenv VISIBILITY          "${VIS_VAL:-public}"
          wenv ROTATION_SEED       "${SEED_VAL}"
          wenv SEARCH_TERMS        "${VARS_SEARCH_TERMS}"
          wenv GEMINI_PROMPT       "${VARS_GEMINI_PROMPT}"
          wenv TTS_RATE            "${VARS_TTS_RATE:-+12%}"
          wenv TTS_VOICE           "${VARS_TTS_VOICE}"
          wenv BGM_URLS            "${VARS_BGM_URLS}"
          wenv UPLOAD_TO_YT        "1"

      - name: Restore global state cache
        uses: actions/cache/restore@v4
        with:
          path: |
            state_global.json
            state_global_topics.json
          key: global-state-${{ github.run_id }}
          restore-keys: |
            global-state-

      - name: Restore channel state cache
        uses: actions/cache/restore@v4
        with:
          path: state_${{ inputs.environment }}.json
          key: chstate-${{ inputs.environment }}-${{ github.run_id }}
          restore-keys: |
            chstate-${{ inputs.environment }}-

      - name: Install Python dependencies
        run: |
          echo "ðŸ“¦ Installing Python packages..."
          python -m pip install -U pip setuptools wheel
          pip install -r requirements.txt
          echo "âœ… Python dependencies installed"

      # ============================================================
      # CRITICAL: stable-ts for MILISECOND-PERFECT caption sync
      # ============================================================
      - name: Install stable-ts (milisecond-perfect captions)
        run: |
          echo "ðŸŽ¯ Installing stable-ts for phoneme-level caption alignment..."
          pip install stable-ts>=2.14.0
          echo "âœ… stable-ts installed - milisecond caption sync enabled!"
          echo "   Caption precision: ~10-20ms (phoneme-level)"

      - name: Build video
        env:
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY:  ${{ secrets.PIXABAY_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # ===== UNIVERSAL TTS (Natural Speech) =====
          TTS_SSML: "0"                     # SSML prosody for all topics
          TTS_RATE: "+12%"                  # Universal speech speed

          # ===== CAPTIONS / KARAOKE (stable-ts Word-Level Timing) =====
          REQUIRE_CAPTIONS: "1"
          KARAOKE_CAPTIONS: "1"
          CAPTIONS_UPPER: "1"
          KARAOKE_INACTIVE: "#FFD700"       # Gold (inactive words)
          KARAOKE_ACTIVE: "#3EA6FF"         # Blue (active words)
          KARAOKE_OUTLINE: "#000000"        # Black outline
          KARAOKE_OFFSET_MS: "0"            # stable-ts = perfect sync (no offset needed)
          KARAOKE_SPEED: "1.0"              # No tempo adjustment needed
          KARAOKE_SPEEDUP_PCT: "0.0"        # Trust stable-ts timing
          KARAOKE_RAMP_PCT: "0.0"           # No progressive speed
          KARAOKE_EARLY_END_MS: "0"         # Full duration
          CAPTION_LEAD_MS: "0"              # No lead offset

          # ===== UNIVERSAL EFFECTS (Adaptive) =====
          KARAOKE_EFFECTS: "1"              # Enable ASS effects
          EFFECT_STYLE: "moderate"          # subtle/moderate/dynamic
          VIDEO_MOTION: "1"                 # Enable zoom/pan
          MOTION_INTENSITY: "subtle"        # subtle/moderate/dynamic

          # ===== UNIVERSAL QUALITY THRESHOLDS =====
          MIN_QUALITY_SCORE: "5.0"          # Content quality (0-10)
          MIN_VIRAL_SCORE: "6.0"            # Viral potential (0-10)
          MIN_OVERALL_SCORE: "7.0"          # Weighted average

          # ===== NOVELTY & COOLDOWN =====
          NOVELTY_ENFORCE: "1"
          NOVELTY_WINDOW: "40"
          NOVELTY_JACCARD_MAX: "0.55"
          NOVELTY_RETRIES: "4"
          ENTITY_COOLDOWN_DAYS: "45"
          SIM_TH_SCRIPT: "0.92"
          SIM_TH_ENTITY: "0.94"
          STATE_DIR: ".state"

          # ===== FOCUS & HOOK (Universal) =====
          HOOK_MAX_WORDS: "8"
          STRICT_ENTITY_FILTER: "1"
          ENTITY_VISUAL_MIN: "0.95"
          ENTITY_VISUAL_STRICT: "1"

          # ===== SEO & METADATA (Universal) =====
          SEO_KEYWORD_DENSITY: "1"
          TITLE_POWER_WORDS: "1"
          MAX_DESCRIPTION_LENGTH: "4900"
          MAX_TAGS: "30"

          # ===== PEXELS STRATEGY (Focus-First) =====
          SCENE_STRATEGY: "topic_only"
          PEXELS_DEEP_SEARCH: "1"
          PEXELS_STRICT_VERTICAL: "0"
          PEXELS_MIN_HEIGHT: "720"
          PEXELS_PER_PAGE: "80"
          PEXELS_ALLOW_REUSE: "0"
          PEXELS_MAX_PAGES: "7"
          ALLOW_PIXABAY_FALLBACK: "1"

          # ===== CTA (Contextual) =====
          CTA_ENABLE: "1"
          CTA_SHOW_SEC: "2.8"
          CTA_MAX_CHARS: "64"

          # ===== BGM (Background Music) =====
          BGM_ENABLE: "1"
          BGM_DIR: "bgm"
          BGM_FADE: "0.8"
          BGM_GAIN_DB: "-11"
          BGM_DUCK_THRESH: "0.035"
          BGM_DUCK_RATIO: "10"
          BGM_DUCK_ATTACK_MS: "6"
          BGM_DUCK_RELEASE_MS: "180"
        run: |
          set -e
          echo "== ${CHANNEL_NAME} =="
          echo "TOPIC=${TOPIC}"
          echo "LANG=${LANG}"
          echo "SEARCH_TERMS=${SEARCH_TERMS}"
          python main.py 2>&1 | tee "build_${CHANNEL_NAME}.log"

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-short
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload logs & meta
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-logs
          path: |
            build_${{ env.CHANNEL_NAME }}.log
            out/**/*.json
            out/*.json
          if-no-files-found: warn
          retention-days: 7

      - name: Save global state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            state_global.json
            state_global_topics.json
          key: global-state-${{ github.run_id }}

      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_${{ inputs.environment }}.json
          key: chstate-${{ inputs.environment }}-${{ github.run_id }}

      # ---------- POST: .state'i 'state' branch'ine kaydet (worktree-safe) ----------
      - name: Persist .state to 'state' branch (worktree-safe)
        if: always()
        shell: bash
        env:
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
        run: |
          set -e
          git fetch origin state || true
          if git ls-remote --exit-code origin state >/dev/null 2>&1; then
            git worktree add _state_wt state
          else
            git worktree add -b state _state_wt HEAD
          fi

          rm -rf _state_wt/* || true
          mkdir -p _state_wt/.state
          cp -r .state/. _state_wt/.state/ 2>/dev/null || true

          pushd _state_wt >/dev/null
          git add .state
          git commit -m "update .state $(date -u +%F_%T) [${CHANNEL_NAME:-single}]" || true
          git push origin state
          popd >/dev/null

          git worktree remove _state_wt --force
