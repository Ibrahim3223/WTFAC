name: Daily Shorts (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || inputs.environment }}
  cancel-in-progress: false

jobs:
  build-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    # Kanal bazlı onay/secrets; vars.* bu environment'tan gelir
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg (fast + cached)
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      # --- STATE CACHE (GLOBAL) - RESTORE ---
      - name: Restore global state cache
        uses: actions/cache/restore@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}
          restore-keys: |
            global-state-

      # --- STATE CACHE (CHANNEL) - RESTORE ---
      - name: Restore channel state cache
        uses: actions/cache/restore@v4
        env:
          CHANNEL_NAME: ${{ inputs.environment }}
        with:
          path: state_${{ env.CHANNEL_NAME }}.json
          key: chstate-${{ env.CHANNEL_NAME }}-${{ github.run_id }}
          restore-keys: |
            chstate-${{ env.CHANNEL_NAME }}-

      # Environment vars (Environment → gerçek env). TOPIC/TERMS dahil!
      - name: Export channel variables
        shell: bash
        run: |
          echo "CHANNEL_NAME=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "TOPIC=${{ vars.TOPIC }}" >> $GITHUB_ENV
          echo "LANG=${{ vars.LANG }}" >> $GITHUB_ENV
          echo "MODE=${{ vars.MODE }}" >> $GITHUB_ENV
          echo "VISIBILITY=${{ vars.VISIBILITY }}" >> $GITHUB_ENV
          echo "ROTATION_SEED=${{ vars.ROTATION_SEED }}" >> $GITHUB_ENV
          echo "SEARCH_TERMS=${{ vars.SEARCH_TERMS }}" >> $GITHUB_ENV
          echo "GEMINI_PROMPT=${{ vars.GEMINI_PROMPT }}" >> $GITHUB_ENV
          echo "TTS_RATE=${{ vars.TTS_RATE }}" >> $GITHUB_ENV
          echo "TTS_VOICE=${{ vars.TTS_VOICE }}" >> $GITHUB_ENV
          echo "UPLOAD_TO_YT=1" >> $GITHUB_ENV

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Build video
        env:
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          REQUIRE_CAPTIONS: "1"
          KARAOKE_CAPTIONS: "1"
          CAPTIONS_UPPER:   "1"
          KARAOKE_MODE:     "fill"
          KARAOKE_INACTIVE: "#FFD700"
          KARAOKE_ACTIVE:   "#3EA6FF"
          KARAOKE_OUTLINE:  "#000000"
        run: |
          echo "== ${CHANNEL_NAME} =="
          echo "TOPIC=$TOPIC"
          echo "LANG=$LANG"
          echo "SEARCH_TERMS=$SEARCH_TERMS"
          python autoshorts_daily.py

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-short
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 7

      # --- STATE CACHE - SAVE ---
      - name: Save global state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}

      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        env:
          CHANNEL_NAME: ${{ inputs.environment }}
        with:
          path: state_${{ env.CHANNEL_NAME }}.json
          key: chstate-${{ env.CHANNEL_NAME }}-${{ github.run_id }}
