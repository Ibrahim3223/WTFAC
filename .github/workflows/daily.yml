name: Daily Shorts (single channel)

# 🔒 Minimum tetikleyici: elle çalıştırma
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

# 🔐 Sıkı izinler (varsayılanları geniş olabiliyor)
permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

# 🚧 Aynı işi üst üste başlatma (özellikle elle tetiklerde)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || inputs.environment }}
  cancel-in-progress: false

jobs:
  build-upload:
    # İstersen sadece main dalından koştur:
    # if: startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest

    # Environment'a bağlı secret/vars kullanımı
    environment: ${{ inputs.environment }}

    # Kaba kullanım/loopları sınırlamak için (opsiyonel)
    timeout-minutes: 30

    env:
      TZ:                ${{ vars.TZ || 'UTC' }}
      CHANNEL_NAME:      ${{ inputs.environment }}
      MODE:              ${{ vars.MODE || 'default' }}
      LANG:              ${{ vars.LANG || 'en' }}
      VISIBILITY:        ${{ vars.VISIBILITY || 'public' }}
      TTS_VOICE:         ${{ vars.TTS_VOICE || '' }}
      TARGET_MIN_SEC:    ${{ vars.TARGET_MIN_SEC || '20' }}
      TARGET_MAX_SEC:    ${{ vars.TARGET_MAX_SEC || '40' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare output dir
        run: mkdir -p out

      - name: Run generator & upload
        run: python autoshorts_daily.py

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-last-video
          path: out/*.mp4
          retention-days: 2
          if-no-files-found: ignore
