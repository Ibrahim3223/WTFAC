name: Daily Shorts (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || inputs.environment }}
  cancel-in-progress: false

jobs:
  build-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    # Kanal bazlı onay/secrets mantığı için environment kalabilir
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt

      - name: Setup FFmpeg (fast + cached)
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      # --- STATE CACHE (GLOBAL) - RESTORE ---
      - name: Restore global state cache
        id: restore-global
        uses: actions/cache/restore@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}
          restore-keys: |
            global-state-

      # --- STATE CACHE (CHANNEL) - RESTORE ---
      - name: Restore channel state cache
        id: restore-ch
        uses: actions/cache/restore@v4
        env:
          CHANNEL_NAME: ${{ inputs.environment }}
        with:
          path: state_${{ env.CHANNEL_NAME }}.json
          key: chstate-${{ env.CHANNEL_NAME }}-${{ github.run_id }}
          restore-keys: |
            chstate-${{ env.CHANNEL_NAME }}-

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Build video
        env:
          # Kanal parametresi (workflow_dispatch input)
          CHANNEL_NAME: ${{ inputs.environment }}

          # Repo-level secrets (veya varsa environment secrets) → process ENV
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}

          # (Varsa YouTube upload için)
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          python autoshorts_daily.py

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-short
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 7

      # --- STATE CACHE (GLOBAL) - SAVE ---
      - name: Save global state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}

      # --- STATE CACHE (CHANNEL) - SAVE ---
      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        env:
          CHANNEL_NAME: ${{ inputs.environment }}
        with:
          path: state_${{ env.CHANNEL_NAME }}.json
          key: chstate-${{ env.CHANNEL_NAME }}-${{ github.run_id }}
