name: Daily Shorts (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Which Channel Environment?"
        required: true
        type: environment
  schedule:
    - cron: "0 6 * * *"   # 06:00 UTC ‚âà 09:00 T√ºrkiye

env:
  TZ: ${{ vars.TZ || secrets.TZ || 'Europe/Istanbul' }}

jobs:
  build-upload:
    runs-on: ubuntu-latest

    # üëá manuel tetikte inputtan, cron'da "default" bir ortam kullanmak istersen ayarlayabilirsin
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install FFmpeg
        run: sudo apt-get update -y && sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install edge-tts google-api-python-client google-auth-oauthlib requests nest-asyncio

      - name: Sanity checks (secrets & vars)
        env:
          # üîê SECRETS
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          # üß≠ VARS (ENVIRONMENT VARS)
          CHANNEL_NAME: ${{ vars.CHANNEL_NAME }}
          MODE:         ${{ vars.MODE }}
          LANG:         ${{ vars.LANG || vars.DEFAULT_LANG || 'en' }}
          VISIBILITY:   ${{ vars.VISIBILITY || vars.DEFAULT_VISIBILITY || 'public' }}
          ROTATION_SEED:${{ vars.ROTATION_SEED || '0' }}
          USE_GEMINI:   ${{ vars.USE_GEMINI || vars.USE_GEMINI_REPO || '0' }}
          GEMINI_MODEL: ${{ vars.GEMINI_MODEL || 'gemini-2.5-flash' }}
          GEMINI_PROMPT:${{ vars.GEMINI_PROMPT || '' }}
          TTS_VOICE:    ${{ vars.TTS_VOICE || 'en-US-AriaNeural' }}
          TTS_RATE:     ${{ vars.TTS_RATE  || '+10%' }}
        run: |
          set -e
          python -V
          ffmpeg -version | head -n 1
          echo "ENVIRONMENT: ${{ inputs.environment }}"
          python - << 'PY'
import os, json
print("Secrets:", json.dumps({
  'PEXELS_API_KEY': 'OK' if os.getenv('PEXELS_API_KEY') else 'MISSING',
  'YT_CLIENT_ID': 'OK' if os.getenv('YT_CLIENT_ID') else 'MISSING',
  'YT_CLIENT_SECRET': 'OK' if os.getenv('YT_CLIENT_SECRET') else 'MISSING',
  'YT_REFRESH_TOKEN': 'OK' if os.getenv('YT_REFRESH_TOKEN') else 'MISSING',
  'GEMINI_API_KEY': 'OK' if os.getenv('GEMINI_API_KEY') else 'MISSING',
}, indent=2))
print("Vars:", json.dumps({
  'CHANNEL_NAME': os.getenv('CHANNEL_NAME'),
  'MODE': os.getenv('MODE'),
  'LANG': os.getenv('LANG'),
  'VISIBILITY': os.getenv('VISIBILITY'),
  'ROTATION_SEED': os.getenv('ROTATION_SEED'),
  'USE_GEMINI': os.getenv('USE_GEMINI'),
  'GEMINI_MODEL': os.getenv('GEMINI_MODEL'),
  'GEMINI_PROMPT': bool(os.getenv('GEMINI_PROMPT')),
  'TTS_VOICE': os.getenv('TTS_VOICE'),
  'TTS_RATE': os.getenv('TTS_RATE'),
}, indent=2))
PY
          mkdir -p out

      - name: Generate & Upload
        env:
          # üîê SECRETS
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          # üß≠ VARS
          CHANNEL_NAME: ${{ vars.CHANNEL_NAME }}
          MODE:         ${{ vars.MODE }}
          LANG:         ${{ vars.LANG || vars.DEFAULT_LANG || 'en' }}
          VISIBILITY:   ${{ vars.VISIBILITY || vars.DEFAULT_VISIBILITY || 'public' }}
          ROTATION_SEED:${{ vars.ROTATION_SEED || '0' }}
          USE_GEMINI:   ${{ vars.USE_GEMINI || vars.USE_GEMINI_REPO || '0' }}
          GEMINI_MODEL: ${{ vars.GEMINI_MODEL || 'gemini-2.5-flash' }}
          GEMINI_PROMPT:${{ vars.GEMINI_PROMPT || '' }}
          TTS_VOICE:    ${{ vars.TTS_VOICE || 'en-US-AriaNeural' }}
          TTS_RATE:     ${{ vars.TTS_RATE  || '+10%' }}
        run: |
          echo "Generating & uploading for: $CHANNEL_NAME"
          python autoshorts_daily.py

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: last-video
          path: out/*.mp4
          if-no-files-found: ignore
