name: Daily Shorts (all channels)

on:
  schedule:
    - cron: "30 16 * * *"  # 19:30 TRT
    - cron: "30 0 * * *"   # 03:30 TRT
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build matrix from channels.yml (no ::set-output)
        id: mk
        shell: bash
        run: |
          python - <<'PY'
import yaml, json, sys, io
with open("channels.yml","r",encoding="utf-8") as f:
    data = yaml.safe_load(f) or {}
chs = []
for ch in data.get("channels", []):
    chs.append({
        "name": ch.get("name"),
        "env": ch.get("env", ch.get("name")),
        "mode": ch.get("mode","freeform"),
        "lang": ch.get("lang","en"),
        "visibility": ch.get("visibility","public"),
        "seed": ch.get("seed","0"),
    })
mx = {"include": chs}
open("mx.json","w",encoding="utf-8").write(json.dumps(mx))
PY
          echo "matrix=$(cat mx.json)" >> "$GITHUB_OUTPUT"

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}

    # Kanal bazlı onay/secrets kuralları için environment kalabilir
    environment: ${{ matrix.env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt

      - name: Setup FFmpeg (fast + cached)
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      # --- STATE CACHE (GLOBAL) - RESTORE ---
      - name: Restore global state cache
        id: restore-global
        uses: actions/cache/restore@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}
          restore-keys: |
            global-state-

      # --- STATE CACHE (CHANNEL) - RESTORE ---
      - name: Restore channel state cache
        id: restore-ch
        uses: actions/cache/restore@v4
        with:
          path: state_${{ matrix.name }}.json
          key: chstate-${{ matrix.name }}-${{ github.run_id }}
          restore-keys: |
            chstate-${{ matrix.name }}-

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Build video
        env:
          # Kanal/konfig değişkenleri matrix’ten
          CHANNEL_NAME: ${{ matrix.name }}
          MODE: ${{ matrix.mode }}
          LANG: ${{ matrix.lang }}
          VISIBILITY: ${{ matrix.visibility }}
          ROTATION_SEED: ${{ matrix.seed }}

          # Repo-level secrets (veya varsa environment secrets) → process ENV
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}

          # (Varsa YouTube upload için)
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          python autoshorts_daily.py

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-short
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 7

      # --- STATE CACHE (GLOBAL) - SAVE ---
      - name: Save global state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}

      # --- STATE CACHE (CHANNEL) - SAVE ---
      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_${{ matrix.name }}.json
          key: chstate-${{ matrix.name }}-${{ github.run_id }}
