name: Daily Shorts (all channels)

# ⏰ Zamanlanmış + elle tetik
on:
  schedule:
    # Her gün 12:00 UTC (TZ env ile oynayabilirsin)
    - cron: "0 12 * * *"
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # channels.yml -> matrix üret
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build matrix from channels.yml
        id: build
        shell: bash
        run: |
          python - <<'PY'
          import yaml, json, sys
          data = yaml.safe_load(open("channels.yml", "r", encoding="utf-8"))
          # channels: [{name, env, mode, lang, visibility, seed}]
          mx = {"include": []}
          for ch in data.get("channels", []):
              mx["include"].append({
                  "name": ch["name"],
                  "env": ch["env"],
                  "mode": ch.get("mode","default"),
                  "lang": ch.get("lang","en"),
                  "visibility": ch.get("visibility","public"),
                  "seed": ch.get("seed","0"),
              })
          print("::set-output name=matrix::" + json.dumps(mx))
          PY

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}

    # Environment bazlı secret/vars için env bağlı koşu
    environment: ${{ matrix.env }}

    timeout-minutes: 35

    env:
      TZ:                ${{ vars.TZ || 'UTC' }}
      CHANNEL_NAME:      ${{ matrix.name }}
      MODE:              ${{ vars.MODE || matrix.mode }}
      LANG:              ${{ vars.LANG || matrix.lang }}
      VISIBILITY:        ${{ vars.VISIBILITY || matrix.visibility }}
      TTS_VOICE:         ${{ vars.TTS_VOICE || '' }}
      TARGET_MIN_SEC:    ${{ vars.TARGET_MIN_SEC || '20' }}
      TARGET_MAX_SEC:    ${{ vars.TARGET_MAX_SEC || '40' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare output dir
        run: mkdir -p out

      - name: Run generator & upload
        run: python autoshorts_daily.py

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env }}-last-video
          path: out/*.mp4
          retention-days: 2
          if-no-files-found: ignore
