name: Daily Shorts (all channels)

on:
  schedule:
    - cron: "0 12 * * *"   # 12:00 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build matrix from channels.yml
        id: build
        shell: bash
        run: |
          python - <<'PY'
          import yaml, json
          data = yaml.safe_load(open("channels.yml","r",encoding="utf-8"))
          mx = {"include": []}
          for ch in data.get("channels", []):
              mx["include"].append({
                  "name": ch["name"],
                  "env": ch.get("env", ch["name"]),
                  # MODE artık opsiyonel: boş bırakabiliriz; kod route ediyor:
                  "mode": ch.get("mode",""),
                  "lang": ch.get("lang","en"),
                  "visibility": ch.get("visibility","public"),
                  "seed": str(ch.get("seed","0")),
              })
          print(f"::set-output name=matrix::{json.dumps(mx)}")
          PY

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6             # 500 kanal ölçeği için API'ları boğmadan
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}

    environment: ${{ matrix.env }}
    timeout-minutes: 45

    env:
      TZ:                 ${{ vars.TZ || 'UTC' }}
      CHANNEL_NAME:       ${{ matrix.name }}
      MODE:               ${{ vars.MODE || matrix.mode }}   # genelde boş kalsın
      LANG:               ${{ vars.LANG || matrix.lang }}
      VISIBILITY:         ${{ vars.VISIBILITY || matrix.visibility }}
      TTS_VOICE:          ${{ vars.TTS_VOICE || '' }}
      TARGET_MIN_SEC:     ${{ vars.TARGET_MIN_SEC || '22' }}
      TARGET_MAX_SEC:     ${{ vars.TARGET_MAX_SEC || '42' }}
      ROTATION_SEED:      ${{ vars.ROTATION_SEED || github.run_number }}
      USE_GEMINI:         '1'
      GEMINI_API_KEY:     ${{ secrets.GEMINI_API_KEY }}
      PEXELS_API_KEY:     ${{ secrets.PEXELS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Restore caches (global + channel) ----
      - name: Restore global content cache
        id: cache-global-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            state_global_topics.json
          key: global-state-v1

      - name: Restore channel state cache
        id: cache-channel-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            state_${{ matrix.env }}.json
          key: chstate-${{ matrix.env }}-v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare output dir
        run: mkdir -p out

      - name: Jitter
        run: |
          S=$(( ( RANDOM % 12 ) + 4 ))
          echo "Sleeping $S sec to spread load..."
          sleep $S

      - name: Run generator & upload
        run: python autoshorts_daily.py

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env }}-last-video
          path: out/*.mp4
          retention-days: 2
          if-no-files-found: ignore

      - name: Save global content cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            state_global_topics.json
          key: global-state-v1

      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            state_${{ matrix.env }}.json
          key: chstate-${{ matrix.env }}-v1
