name: Daily Shorts (all channels)

on:
  schedule:
    # US/Eastern 12:00 & 20:00 — hem EDT (UTC-4) hem EST (UTC-5)
    - cron: "0 16 * * *"  # 12:00 ET (EDT)
    - cron: "0 0 * * *"   # 20:00 ET (EDT)
    - cron: "0 17 * * *"  # 12:00 ET (EST)
    - cron: "0 1 * * *"   # 20:00 ET (EST)
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ---- Time gate: US/Eastern 12:00 veya 20:00 ±120dk ise devam ----
  time-gate:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.chk.outputs.should_run }}
      slot_key:   ${{ steps.chk.outputs.slot_key }}
      slot_label: ${{ steps.chk.outputs.slot_label }}
    steps:
      - name: Check US/Eastern window (±120 min) and compute slot key
        id: chk
        shell: bash
        run: |
          set -euo pipefail
          ET_H=$(TZ=America/New_York date +%H)
          ET_M=$(TZ=America/New_York date +%M)
          ET_D=$(TZ=America/New_York date +%Y%m%d)
          ET_MIN=$((10#$ET_H*60 + 10#$ET_M))
          echo "US/Eastern now: ${ET_H}:${ET_M}  (mins=${ET_MIN})"

          NOON=$((12*60))    # 12:00
          EVE=$((20*60))     # 20:00
          WIN=120            # ±120 dk

          in_window () { local target=$1; [[ $ET_MIN -ge $((target-WIN)) && $ET_MIN -le $((target+WIN)) ]]; }

          ok=false
          slot=""
          if in_window "$NOON"; then
            ok=true; slot="noon"
          elif in_window "$EVE"; then
            ok=true; slot="evening"
          fi

          if $ok; then
            slot_key="${ET_D}-${slot}"
            echo "should_run=true"     >> "$GITHUB_OUTPUT"
            echo "slot_label=${slot}"  >> "$GITHUB_OUTPUT"
            echo "slot_key=${slot_key}">> "$GITHUB_OUTPUT"
            echo "Gate OK for slot: ${slot_key}"
          else
            echo "should_run=false"    >> "$GITHUB_OUTPUT"
            echo "slot_label=none"     >> "$GITHUB_OUTPUT"
            echo "slot_key="           >> "$GITHUB_OUTPUT"
            echo "Gate closed."
          fi

  make-matrix:
    runs-on: ubuntu-latest
    needs: time-gate
    if: ${{ needs.time-gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build matrix from channels.yml (no ::set-output)
        id: mk
        shell: bash
        run: |
          python - <<'PY'
          import yaml, json
          data = yaml.safe_load(open("channels.yml","r",encoding="utf-8")) or {}
          chs = []
          for ch in data.get("channels", []):
              chs.append({
                  "name": ch.get("name"),
                  "env": ch.get("env", ch.get("name")),
                  "mode": ch.get("mode","freeform"),
                  "lang": ch.get("lang","en"),
                  "visibility": ch.get("visibility","public"),
                  "seed": ch.get("seed","0"),
              })
          open("mx.json","w",encoding="utf-8").write(json.dumps({"include": chs}))
          PY
          echo "matrix=$(cat mx.json)" >> "$GITHUB_OUTPUT"

  build-upload:
    needs: [make-matrix, time-gate]
    if: ${{ needs.time-gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}

    environment: ${{ matrix.env }}

    steps:
      # --- duplicate guard: slot run-stamp cache ---
      - name: Check run-stamp cache (prevent duplicate slot/day)
        id: slotcache
        uses: actions/cache/restore@v4
        with:
          path: .gate-stamp
          key: runstamp-${{ needs.time-gate.outputs.slot_key }}
          restore-keys: |
            runstamp-

      - name: Checkout
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4

      - name: (Optional) Fetch LFS assets (e.g., bgm/)
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        run: |
          if command -v git >/dev/null 2>&1; then
            if git lfs version >/dev/null 2>&1; then git lfs pull || true; fi
          fi
          ls -la bgm || true

      - name: Setup Python
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg (fast + cached)
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      - name: Restore global state cache
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: |
            state_global.json
            state_global_topics.json
          key: global-state-${{ github.run_id }}
          restore-keys: |
            global-state-

      - name: Restore channel state cache
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: state_${{ matrix.name }}.json
          key: chstate-${{ matrix.name }}-${{ github.run_id }}
          restore-keys: |
            chstate-${{ matrix.name }}-

      # ---------- SAFE ENV EXPORT ----------
      - name: Export channel variables (safe)
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        shell: bash
        env:
          MATRIX_NAME:           ${{ matrix.name }}
          DEFAULT_LANG:          ${{ matrix.lang }}
          DEFAULT_MODE:          ${{ matrix.mode }}
          DEFAULT_VISIBILITY:    ${{ matrix.visibility }}
          DEFAULT_SEED:          ${{ matrix.seed }}

          VARS_TOPIC:            ${{ vars.TOPIC }}
          VARS_LANG:             ${{ vars.LANG }}
          VARS_MODE:             ${{ vars.MODE }}
          VARS_VISIBILITY:       ${{ vars.VISIBILITY }}
          VARS_ROTATION_SEED:    ${{ vars.ROTATION_SEED }}
          VARS_SEARCH_TERMS:     ${{ vars.SEARCH_TERMS }}
          VARS_GEMINI_PROMPT:    ${{ vars.GEMINI_PROMPT }}
          VARS_TTS_RATE:         ${{ vars.TTS_RATE }}
          VARS_TTS_VOICE:        ${{ vars.TTS_VOICE }}
          KARAOKE_OFFSET_MS: "-200"
          KARAOKE_SPEED: "1.35"
        run: |
          set -euo pipefail
          CHANNEL_NAME="$MATRIX_NAME"
          LANG_VAL="${VARS_LANG:-$DEFAULT_LANG}"
          MODE_VAL="${VARS_MODE:-$DEFAULT_MODE}"
          VIS_VAL="${VARS_VISIBILITY:-$DEFAULT_VISIBILITY}"
          SEED_VAL="${VARS_ROTATION_SEED:-$DEFAULT_SEED}"

          wenv () {
            local __name="$1"; shift
            local __val="$*"
            local __delim="EOF_${__name}_$$"
            {
              echo "${__name}<<${__delim}"
              printf '%s\n' "${__val}"
              echo "${__delim}"
            } >> "$GITHUB_ENV"
          }

          wenv CHANNEL_NAME        "${CHANNEL_NAME}"
          wenv TOPIC               "${VARS_TOPIC}"
          wenv LANG                "${LANG_VAL}"
          wenv MODE                "${MODE_VAL}"
          wenv VISIBILITY          "${VIS_VAL:-public}"
          wenv ROTATION_SEED       "${SEED_VAL}"
          wenv SEARCH_TERMS        "${VARS_SEARCH_TERMS}"
          wenv GEMINI_PROMPT       "${VARS_GEMINI_PROMPT}"
          wenv TTS_RATE            "${VARS_TTS_RATE}"
          wenv TTS_VOICE           "${VARS_TTS_VOICE}"
          wenv UPLOAD_TO_YT        "1"

      - name: Install deps
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Build video
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        env:
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          REQUIRE_CAPTIONS: "1"
          KARAOKE_CAPTIONS: "1"
          CAPTIONS_UPPER:   "1"
          KARAOKE_MODE:     "fill"
          KARAOKE_INACTIVE: "#FFD700"
          KARAOKE_ACTIVE:   "#3EA6FF"
          KARAOKE_OUTLINE:  "#000000"

          # ==== CAPTION SYNC TWEAKS ====
          KARAOKE_SPEEDUP_PCT:  "5.0"
          KARAOKE_RAMP_PCT:     "2.0"
          KARAOKE_EARLY_END_MS: "120"
          CAPTION_LEAD_MS:      "80"

          # ==== BGM (Background Music) ====
          BGM_ENABLE:         "1"
          BGM_SIDECHAIN:      "1"
          BGM_GAIN_DB:        "-10"
          BGM_DUCK_THRESH:    "0.03"
          BGM_DUCK_RATIO:     "10"
          BGM_DUCK_ATTACK_MS: "6"
          BGM_DUCK_RELEASE_MS: "180"
          BGM_URLS:           ${{ vars.BGM_URLS }}
        run: |
          echo "== ${CHANNEL_NAME} =="
          echo "TOPIC=${TOPIC}"
          echo "LANG=${LANG}"
          echo "SEARCH_TERMS=${SEARCH_TERMS}"
          python autoshorts_daily.py

      - name: Upload artifact (mp4)
        if: ${{ always() && steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-short
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 7

      # --- mark slot consumed & save run-stamp ---
      - name: Mark slot consumed
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        run: |
          date -u +"%Y-%m-%dT%H:%M:%SZ  ${{ needs.time-gate.outputs.slot_key }}" > .gate-stamp
          cat .gate-stamp

      - name: Save run-stamp cache
        if: ${{ steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: .gate-stamp
          key: runstamp-${{ needs.time-gate.outputs.slot_key }}

      - name: Save global state cache
        if: ${{ always() && steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            state_global.json
            state_global_topics.json
          key: global-state-${{ github.run_id }}

      - name: Save channel state cache
        if: ${{ always() && steps.slotcache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: state_${{ matrix.name }}.json
          key: chstate-${{ matrix.name }}-${{ github.run_id }}
