name: Daily Shorts (all channels)

on:
  schedule:
    - cron: "30 16 * * *"  # 19:30 TRT
    - cron: "30 0 * * *"   # 03:30 TRT
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build matrix from channels.yml (no ::set-output)
        id: mk
        shell: bash
        run: |
          python - <<'PY'
          import yaml, json
          data = yaml.safe_load(open("channels.yml","r",encoding="utf-8")) or {}
          chs = []
          for ch in data.get("channels", []):
              chs.append({
                  "name": ch.get("name"),
                  "env": ch.get("env", ch.get("name")),
                  "mode": ch.get("mode","freeform"),
                  "lang": ch.get("lang","en"),
                  "visibility": ch.get("visibility","public"),
                  "seed": ch.get("seed","0"),
              })
          open("mx.json","w",encoding="utf-8").write(json.dumps({"include": chs}))
          PY
          echo "matrix=$(cat mx.json)" >> "$GITHUB_OUTPUT"

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}

    # vars.* değerlerini bu environment'tan alacağız
    environment: ${{ matrix.env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg (fast + cached)
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      # --- STATE CACHE (GLOBAL) - RESTORE ---
      - name: Restore global state cache
        uses: actions/cache/restore@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}
          restore-keys: |
            global-state-

      # --- STATE CACHE (CHANNEL) - RESTORE ---
      - name: Restore channel state cache
        uses: actions/cache/restore@v4
        with:
          path: state_${{ matrix.name }}.json
          key: chstate-${{ matrix.name }}-${{ github.run_id }}
          restore-keys: |
            chstate-${{ matrix.name }}-

      # Environment vars (TOPIC dahil) → güvenli heredoc ile $GITHUB_ENV
      - name: Export channel variables (safe)
        shell: bash
        run: |
          {
            echo "CHANNEL_NAME<<EOF";   echo "${{ matrix.name }}";                              echo "EOF";
            echo "TOPIC<<EOF";          echo "${{ vars.TOPIC }}";                               echo "EOF";
            echo "LANG<<EOF";           echo "${{ vars.LANG || matrix.lang }}";                 echo "EOF";
            echo "MODE<<EOF";           echo "${{ vars.MODE || matrix.mode }}";                 echo "EOF";
            echo "VISIBILITY<<EOF";     echo "${{ vars.VISIBILITY || matrix.visibility }}";     echo "EOF";
            echo "ROTATION_SEED<<EOF";  echo "${{ vars.ROTATION_SEED || matrix.seed }}";        echo "EOF";
            echo "SEARCH_TERMS<<EOF";   echo "${{ vars.SEARCH_TERMS }}";                        echo "EOF";
            echo "GEMINI_PROMPT<<EOF";  echo "${{ vars.GEMINI_PROMPT }}";                       echo "EOF";
            echo "TTS_RATE<<EOF";       echo "${{ vars.TTS_RATE }}";                            echo "EOF";
            echo "TTS_VOICE<<EOF";      echo "${{ vars.TTS_VOICE }}";                           echo "EOF";
            echo "UPLOAD_TO_YT<<EOF";   echo "1";                                               echo "EOF";
          } >> "$GITHUB_ENV"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Build video
        env:
          # Secrets
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # Altyazı / karaoke stilin (tamamı büyük harf, sarı; aktif kelime mavi)
          REQUIRE_CAPTIONS: "1"
          KARAOKE_CAPTIONS: "1"
          CAPTIONS_UPPER:   "1"
          KARAOKE_MODE:     "fill"
          KARAOKE_INACTIVE: "#FFD700"
          KARAOKE_ACTIVE:   "#3EA6FF"
          KARAOKE_OUTLINE:  "#000000"
        run: |
          echo "== ${CHANNEL_NAME} =="
          echo "TOPIC=$TOPIC"
          echo "LANG=$LANG"
          echo "SEARCH_TERMS=$SEARCH_TERMS"
          python autoshorts_daily.py

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-short
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 7

      # --- STATE CACHE - SAVE ---
      - name: Save global state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_global.json
          key: global-state-${{ github.run_id }}

      - name: Save channel state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state_${{ matrix.name }}.json
          key: chstate-${{ matrix.name }}-${{ github.run_id }}
