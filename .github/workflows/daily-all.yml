name: Daily Shorts (ALL channels)

on:
  schedule:
    - cron: "0 6 * * *"   # 06:00 UTC ≈ 09:00 Türkiye
  workflow_dispatch:

jobs:
  build-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Read channel matrix from channels.yml
        id: matrix
        run: |
          python - << 'PY'
          import yaml, json, sys, pathlib
          p = pathlib.Path("channels.yml")
          if not p.exists():
              print("::error::channels.yml not found")
              sys.exit(1)
          data = yaml.safe_load(p.read_text(encoding="utf-8"))
          chans = data.get("channels", [])
          # sadece aktif kanalları seçmek istersen (opsiyonel): chans = [c for c in chans if c.get("active", True)]
          print("Found channels:", len(chans))
          print(f"::set-output name=value::{json.dumps(chans)}")
          PY
        shell: bash

      - name: Run all channels sequentially
        uses: nick-fields/retry@v3
        with:
          max_attempts: 1
          command: |
            python -V
            ffmpeg -version | head -n 1
            python - << 'PY'
            import os, json, subprocess, sys, textwrap
            chans = json.loads(r"""${{ steps.matrix.outputs.value }}""")
            if not isinstance(chans, list) or not chans:
                print("No channels found in channels.yml")
                sys.exit(1)

            def run_one(ch):
                env_name = ch.get("env") or ch.get("name")
                print(f"\n=== {env_name} ===")
                # Actions environment bağlamına geç ve secret/vars’ı al
                # Bunu yapmak için her kanal için ayrı bir job çalıştırmak idealdir;
                # tek job içinde sırayla çalıştırdığımız için gerekli değerleri repo secrets/vars’tan okuyacağız.
                # Kanal bazlı YT_* değerleri environment secrets’taysa, daily.yml (tek-kanal) şablonunu kullan.
                # Buradaki toplu koşu, **repo secrets** ile çalışan kanallar içindir.

                env = os.environ.copy()
                env["CHANNEL_NAME"] = ch.get("name", "")
                env["MODE"]         = ch.get("mode", "")
                env["LANG"]         = ch.get("lang", os.getenv("DEFAULT_LANG","en"))
                env["VISIBILITY"]   = ch.get("visibility", os.getenv("DEFAULT_VISIBILITY","public"))
                env["ROTATION_SEED"]= str(ch.get("seed","0"))

                # repo-level secrets
                # (YouTube bilgileri environment’a özelse -> bu toplu workflow yerine tek-kanal daily.yml ile çalıştırın)
                need = ["PEXELS_API_KEY", "GEMINI_API_KEY",
                        "YT_CLIENT_ID","YT_CLIENT_SECRET","YT_REFRESH_TOKEN"]
                missing = [k for k in need if not os.getenv(k)]
                if missing:
                    print(f"Skipping {env['CHANNEL_NAME']} (missing repo secrets: {missing})")
                    return

                print(f"-> Generating & uploading for: {env['CHANNEL_NAME']}")
                r = subprocess.run([sys.executable, "autoshorts_daily.py"], env=env)
                if r.returncode != 0:
                    print(f"::warning::{env['CHANNEL_NAME']} failed with code {r.returncode}")

            for ch in chans:
                run_one(ch)
            PY

      - name: Upload artifacts (last video if exists)
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: last-videos
          path: out/*.mp4
          if-no-files-found: ignore
