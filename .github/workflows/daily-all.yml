name: Daily Shorts (all channels)

on:
  schedule:
    # 20:00 America/New_York yıl boyu (DST güvenli: iki UTC saatinde tetikler)
    - cron: "0 0 * * *"   # 00:00 UTC ≈ 20:00 ET (DST)
    - cron: "0 1 * * *"   # 01:00 UTC ≈ 20:00 ET (Standard Time)
  workflow_dispatch:

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install PyYAML
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - id: build
        run: |
          python - <<'PY'
          import os, json, yaml
          with open("channels.yml", "r", encoding="utf-8") as f:
              data = yaml.safe_load(f) or {}
          items = []
          for c in (data.get("channels") or []):
              items.append({
                  "name":       c.get("name"),
                  "env":        c.get("env", c.get("name")),
                  "mode":       c.get("mode", "country_facts"),
                  "lang":       c.get("lang", "en"),
                  "visibility": c.get("visibility", "public")
              })
          matrix = {"include": items}
          print("Matrix size:", len(items))
          with open(os.environ["GITHUB_OUTPUT"], "a") as g:
              g.write(f"matrix={json.dumps(matrix)}\n")
          PY

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}

    environment: ${{ matrix.env }}

    env:
      TZ:                ${{ vars.TZ || 'UTC' }}
      CHANNEL_NAME:      ${{ matrix.name }}
      MODE:              ${{ vars.MODE || matrix.mode }}
      LANG:              ${{ vars.DEFAULT_LANG || matrix.lang }}
      VISIBILITY:        ${{ vars.DEFAULT_VISIBILITY || matrix.visibility }}
      TTS_VOICE:         ${{ vars.TTS_VOICE || 'en-US-AriaNeural' }}
      TTS_RATE:          ${{ vars.TTS_RATE || '+10%' }}
      USE_GEMINI:        ${{ vars.USE_GEMINI || '0' }}
      GEMINI_MODEL:      ${{ vars.GEMINI_MODEL || 'gemini-2.5-flash' }}
      GEMINI_PROMPT:     ${{ vars.GEMINI_PROMPT }}
      ROTATION_SEED:     ${{ vars.ROTATION_SEED || '0' }}

      PEXELS_API_KEY:    ${{ secrets.PEXELS_API_KEY }}
      GEMINI_API_KEY:    ${{ secrets.GEMINI_API_KEY }}
      YT_CLIENT_ID:      ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET:  ${{ secrets.YT_CLIENT_SECRET }}
      YT_REFRESH_TOKEN:  ${{ secrets.YT_REFRESH_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      # ET gününe göre tek-kez çalıştır (ikinci cron'u atla)
      - name: Compute ET date
        id: etdate
        run: |
          python - <<'PY'
          import datetime, os
          try:
              from zoneinfo import ZoneInfo
              now = datetime.datetime.now(ZoneInfo("America/New_York"))
          except Exception:
              now = datetime.datetime.utcnow()
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"date={now.strftime('%Y-%m-%d')}\n")
          PY

      - name: Restore daily-run cache (skip if already ran)
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: .daily_run_stamp
          key: daily-run-${{ steps.etdate.outputs.date }}

      - name: Stop if already ran today
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "Already ran for ${{ steps.etdate.outputs.date }} ET — skipping."
          exit 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install FFmpeg
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -q edge-tts google-api-python-client google-auth google-auth-oauthlib requests nest-asyncio pyyaml

      - name: Echo channel
        run: |
          echo "Generating & uploading for: ${{ matrix.name }}"
          mkdir -p out

      - name: Run generator & upload
        run: python autoshorts_daily.py

      - name: Save daily-run cache (mark execution for ET date)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: .daily_run_stamp
          key: daily-run-${{ steps.etdate.outputs.date }}

      - name: Save video artifact
        if: ${{ always() && hashFiles('out/*.mp4') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env }}-last-video
          path: out/*.mp4
          if-no-files-found: ignore
